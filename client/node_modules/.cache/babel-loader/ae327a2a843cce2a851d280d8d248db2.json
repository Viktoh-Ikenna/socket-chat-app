{"ast":null,"code":"var _jsxFileName = \"/home/chidex/Documents/Socket-Chat-App-main/client/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { ShowOnline } from './showOnline';\nimport \"./App.css\";\nlet socket;\nconst CONNECTION_PORT = \"localhost:3002/\";\n\nfunction App() {\n  // Before Login\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [userName, setUserName] = useState(\"\"); // After Login\n\n  const [message, setMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  const [userList, setUsers] = useState([]);\n  useEffect(() => {\n    socket = io(CONNECTION_PORT);\n  }, [CONNECTION_PORT]);\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageList([...messageList, data]);\n    });\n  });\n  useEffect(() => {\n    socket.on(\"online_users\", data => {\n      // setMessageList([...messageList, data]);\n      setUsers(prev => {\n        return [...prev, data];\n      });\n    });\n  }, []);\n  useEffect(() => {\n    socket.on(\"disconnected\", data => {\n      // setMessageList([...messageList, data]);\n      const userss = [...userList];\n      console.log(userList);\n      userss.map(user => {\n        if (user.id === user) {\n          return { ...user,\n            status: false\n          };\n        }\n\n        return user;\n      });\n      setUsers(userss);\n      console.log(userss);\n    });\n  }, []);\n\n  const connectToRoom = () => {\n    setLoggedIn(true);\n    socket.emit(\"online\", userName);\n  };\n\n  const sendMessage = async () => {\n    let messageContent = {\n      room: room,\n      content: {\n        author: userName,\n        message: message\n      }\n    };\n    await socket.emit(\"send_message\", messageContent);\n    setMessageList([...messageList, messageContent.content]);\n    setMessage(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, !loggedIn ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"logIn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Name...\",\n    onChange: e => {\n      setUserName(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: connectToRoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, \"Enter Chat\")) : /*#__PURE__*/React.createElement(ShowOnline, {\n    messageList: messageList,\n    users: userList,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    userName: userName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/chidex/Documents/Socket-Chat-App-main/client/src/App.js"],"names":["React","useState","useEffect","io","ShowOnline","socket","CONNECTION_PORT","App","loggedIn","setLoggedIn","room","setRoom","userName","setUserName","message","setMessage","messageList","setMessageList","userList","setUsers","on","data","prev","userss","console","log","map","user","id","status","connectToRoom","emit","sendMessage","messageContent","content","author","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,OAAO,WAAP;AAEA,IAAIC,MAAJ;AACA,MAAMC,eAAe,GAAG,iBAAxB;;AAEA,SAASC,GAAT,GAAe;AACb;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC,CAJa,CAMb;;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACiB,QAAD,EAAUC,QAAV,IAAoBlB,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,MAAM,GAAGF,EAAE,CAACG,eAAD,CAAX;AACD,GAFQ,EAEN,CAACA,eAAD,CAFM,CAAT;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,MAAM,CAACe,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAU;AACrCJ,MAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBK,IAAjB,CAAD,CAAd;AACD,KAFD;AAGD,GAJQ,CAAT;AAKAnB,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,MAAM,CAACe,EAAP,CAAU,cAAV,EAA2BC,IAAD,IAAU;AAClC;AACAF,MAAAA,QAAQ,CAAEG,IAAD,IAAQ;AACf,eAAM,CAAC,GAAGA,IAAJ,EAASD,IAAT,CAAN;AACD,OAFO,CAAR;AAGD,KALD;AAMD,GAPQ,EAOP,EAPO,CAAT;AAQAnB,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,MAAM,CAACe,EAAP,CAAU,cAAV,EAA2BC,IAAD,IAAU;AAClC;AAEA,YAAME,MAAM,GAAC,CAAC,GAAGL,QAAJ,CAAb;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACAK,MAAAA,MAAM,CAACG,GAAP,CAAWC,IAAI,IAAE;AACf,YAAGA,IAAI,CAACC,EAAL,KAAUD,IAAb,EAAkB;AAChB,iBAAO,EAAC,GAAGA,IAAJ;AAASE,YAAAA,MAAM,EAAC;AAAhB,WAAP;AACD;;AACD,eAAOF,IAAP;AACD,OALD;AAMFR,MAAAA,QAAQ,CAACI,MAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACC,KAbD;AAcD,GAfQ,EAeP,EAfO,CAAT;;AAgBA,QAAMO,aAAa,GAAG,MAAM;AAC1BrB,IAAAA,WAAW,CAAC,IAAD,CAAX;AAEDJ,IAAAA,MAAM,CAAC0B,IAAP,CAAY,QAAZ,EAAsBnB,QAAtB;AACA,GAJD;;AAMA,QAAMoB,WAAW,GAAG,YAAY;AAC9B,QAAIC,cAAc,GAAG;AACnBvB,MAAAA,IAAI,EAAEA,IADa;AAEnBwB,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAEvB,QADD;AAEPE,QAAAA,OAAO,EAAEA;AAFF;AAFU,KAArB;AAQA,UAAMT,MAAM,CAAC0B,IAAP,CAAY,cAAZ,EAA4BE,cAA5B,CAAN;AACAhB,IAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBiB,cAAc,CAACC,OAAhC,CAAD,CAAd;AACAnB,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAZD;;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACP,QAAD,gBACC;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,SAFd;AAGE,IAAA,QAAQ,EAAG4B,CAAD,IAAO;AACfvB,MAAAA,WAAW,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAUE;AAAQ,IAAA,OAAO,EAAER,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF,CADD,gBAaG,oBAAC,UAAD;AAAY,IAAA,WAAW,EAAEd,WAAzB;AAAsC,IAAA,KAAK,EAAEE,QAA7C;AAAuD,IAAA,UAAU,EAAEH,UAAnE;AAA+E,IAAA,WAAW,EAAEiB,WAA5F;AAAyG,IAAA,QAAQ,EAAEpB,QAAnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdN,CADF;AAiBE;;AAEJ,eAAeL,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport {ShowOnline} from './showOnline'\nimport \"./App.css\";\n\nlet socket;\nconst CONNECTION_PORT = \"localhost:3002/\";\n\nfunction App() {\n  // Before Login\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n\n  // After Login\n  const [message, setMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  const [userList,setUsers]=useState([]);\n\n  useEffect(() => {\n    socket = io(CONNECTION_PORT);\n  }, [CONNECTION_PORT]);\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList([...messageList, data]);\n    });\n  });\n  useEffect(() => {\n    socket.on(\"online_users\", (data) => {\n      // setMessageList([...messageList, data]);\n      setUsers((prev)=>{\n        return[...prev,data]\n      })\n    });\n  },[]);\n  useEffect(() => {\n    socket.on(\"disconnected\", (data) => {\n      // setMessageList([...messageList, data]);\n      \n      const userss=[...userList];\n      console.log(userList)\n      userss.map(user=>{\n        if(user.id===user){\n          return {...user,status:false}\n        }\n        return user;\n      })\n    setUsers(userss);\n    console.log(userss)\n    });\n  },[]);\n  const connectToRoom = () => {\n    setLoggedIn(true);\n    \n   socket.emit(\"online\", userName);\n  };\n\n  const sendMessage = async () => {\n    let messageContent = {\n      room: room,\n      content: {\n        author: userName,\n        message: message,\n      },\n    };\n\n    await socket.emit(\"send_message\", messageContent);\n    setMessageList([...messageList, messageContent.content]);\n    setMessage(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      {!loggedIn ? (\n        <div className=\"logIn\">\n          <div className=\"inputs\">\n            <input\n              type=\"text\"\n              placeholder=\"Name...\"\n              onChange={(e) => {\n                setUserName(e.target.value);\n              }}\n            />\n          </div>\n          <button onClick={connectToRoom}>Enter Chat</button>\n        </div>\n      ) : <ShowOnline messageList={messageList} users={userList} setMessage={setMessage} sendMessage={sendMessage} userName={userName}/>}\n  </div>\n  )}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}